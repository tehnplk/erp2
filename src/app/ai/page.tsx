'use client';

import { useState, useEffect, useRef } from 'react';

interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: string;
  isChart?: boolean;
}

export default function AIPage() {
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Hospital ERP ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö',
      isUser: false,
      timestamp: '10:30'
    },
    {
      id: 2,
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°',
      isUser: true,
      timestamp: '10:31'
    },
    {
      id: 3,
      text: '‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 15 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:\n\n‚Ä¢ ‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå - 8 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå - 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î - 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö?',
      isUser: false,
      timestamp: '10:31'
    },
    {
      id: 4,
      text: '‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢',
      isUser: true,
      timestamp: '10:33'
    },
    {
      id: 5,
      text: '‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏ú‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n\nüî¥ **‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏î‡πà‡∏ß‡∏ô:**\n‚Ä¢ ‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏ß‡∏î - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 15%\n‚Ä¢ ‡πÄ‡∏Ç‡πá‡∏°‡∏â‡∏µ‡∏î‡∏¢‡∏≤ - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 8%\n\nüü° **‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠:**\n‚Ä¢ ‡∏ú‡πâ‡∏≤‡∏û‡∏±‡∏ô‡πÅ‡∏ú‡∏• - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 35%\n‚Ä¢ ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 28%\n\nüí∞ **‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏ø125,000\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
      isUser: false,
      timestamp: '10:34'
    }
  ]);

  const [inputText, setInputText] = useState('');

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = () => {
    if (!inputText.trim()) return;

    const newMessage: Message = {
      id: messages.length + 1,
      text: inputText,
      isUser: true,
      timestamp: new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages([...messages, newMessage]);
    setInputText('');

    // Simulate AI response
    setTimeout(() => {
      let responseText = '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì... ü§ñ';
      
      // Check if user asked for chart
      if (inputText.includes('‡∏Å‡∏£‡∏≤‡∏ü') || inputText.includes('chart')) {
        const aiResponse: Message = {
          id: messages.length + 2,
          text: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:',
          isUser: false,
          timestamp: new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }),
          isChart: true
        };
        setMessages(prev => [...prev, aiResponse]);
        return;
      }
      
      const aiResponse: Message = {
        id: messages.length + 2,
        text: responseText,
        isUser: false,
        timestamp: new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
      };
      setMessages(prev => [...prev, aiResponse]);
    }, 1000);
  };

  return (
    <div className="container mx-auto px-4 py-8 max-h-screen flex flex-col">

      {/* Chat Container */}
      <div className="flex-1 bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/20 flex flex-col min-h-0">
        {/* Messages Area */}
        <div className="flex-1 p-6 overflow-y-auto space-y-4 min-h-0">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg ${
                  message.isUser
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-800'
                }`}
              >
                {message.isChart ? (
                  <div>
                    <div className="mb-4">{message.text}</div>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h4 className="font-bold mb-3 text-gray-700">üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠</h4>
                      <div className="space-y-2">
                        <div className="flex items-center">
                          <span className="w-20 text-xs text-gray-600">‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏ß‡∏î</span>
                          <div className="flex-1 bg-gray-200 rounded-full h-4 mx-2">
                            <div className="bg-red-500 h-4 rounded-full" style={{width: '85%'}}></div>
                          </div>
                          <span className="text-xs text-gray-600">85%</span>
                        </div>
                        <div className="flex items-center">
                          <span className="w-20 text-xs text-gray-600">‡πÄ‡∏Ç‡πá‡∏°‡∏â‡∏µ‡∏î‡∏¢‡∏≤</span>
                          <div className="flex-1 bg-gray-200 rounded-full h-4 mx-2">
                            <div className="bg-blue-500 h-4 rounded-full" style={{width: '70%'}}></div>
                          </div>
                          <span className="text-xs text-gray-600">70%</span>
                        </div>
                        <div className="flex items-center">
                          <span className="w-20 text-xs text-gray-600">‡∏ú‡πâ‡∏≤‡∏û‡∏±‡∏ô‡πÅ‡∏ú‡∏•</span>
                          <div className="flex-1 bg-gray-200 rounded-full h-4 mx-2">
                            <div className="bg-green-500 h-4 rounded-full" style={{width: '60%'}}></div>
                          </div>
                          <span className="text-xs text-gray-600">60%</span>
                        </div>
                        <div className="flex items-center">
                          <span className="w-20 text-xs text-gray-600">‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå</span>
                          <div className="flex-1 bg-gray-200 rounded-full h-4 mx-2">
                            <div className="bg-yellow-500 h-4 rounded-full" style={{width: '50%'}}></div>
                          </div>
                          <span className="text-xs text-gray-600">50%</span>
                        </div>
                        <div className="flex items-center">
                          <span className="w-20 text-xs text-gray-600">‡∏ñ‡∏∏‡∏á‡∏°‡∏∑‡∏≠</span>
                          <div className="flex-1 bg-gray-200 rounded-full h-4 mx-2">
                            <div className="bg-purple-500 h-4 rounded-full" style={{width: '40%'}}></div>
                          </div>
                          <span className="text-xs text-gray-600">40%</span>
                        </div>
                        <div className="flex items-center">
                          <span className="w-20 text-xs text-gray-600">‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å</span>
                          <div className="flex-1 bg-gray-200 rounded-full h-4 mx-2">
                            <div className="bg-orange-500 h-4 rounded-full" style={{width: '30%'}}></div>
                          </div>
                          <span className="text-xs text-gray-600">30%</span>
                        </div>
                      </div>
                      <div className="mt-4 pt-3 border-t border-gray-200 text-xs text-gray-600">
                        <div className="grid grid-cols-2 gap-2">
                          <div>üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ‡∏ø125,000</div>
                          <div>üìà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô: 15%</div>
                        </div>
                        <div className="mt-2">üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏ß‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πá‡∏°‡∏â‡∏µ‡∏î‡∏¢‡∏≤</div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="whitespace-pre-wrap">{message.text}</div>
                )}
                <div
                  className={`text-xs mt-2 ${
                    message.isUser ? 'text-blue-100' : 'text-gray-500'
                  }`}
                >
                  {message.timestamp}
                </div>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="border-t border-gray-200 p-4">
          <div className="flex space-x-4">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputText.trim()}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              ‡∏™‡πà‡∏á üì§
            </button>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="mt-4 grid grid-cols-2 md:grid-cols-5 gap-3 flex-shrink-0">
        <button
          onClick={() => setInputText('‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢')}
          className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-lg p-3 text-sm hover:bg-white/90 transition-colors"
        >
          üìä ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢
        </button>
        <button
          onClick={() => setInputText('‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ')}
          className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-lg p-3 text-sm hover:bg-white/90 transition-colors"
        >
          üí∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠
        </button>
        <button
          onClick={() => setInputText('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤')}
          className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-lg p-3 text-sm hover:bg-white/90 transition-colors"
        >
          üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠
        </button>
        <button
          onClick={() => setInputText('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')}
          className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-lg p-3 text-sm hover:bg-white/90 transition-colors"
        >
          üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        </button>
        <button
          onClick={() => setInputText('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠')}
          className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-lg p-3 text-sm hover:bg-white/90 transition-colors"
        >
          üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        </button>
      </div>
    </div>
  );
}
